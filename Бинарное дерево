// Класс, представляющий узел бинарного дерева
class TreeNode {
    int data;
    TreeNode left;
    TreeNode right;

    public TreeNode(int data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

// Класс, представляющий само бинарное дерево
class BinaryTree {
    TreeNode root;

    public BinaryTree() {
        this.root = null;
    }

    // Метод для добавления нового узла в бинарное дерево
    public void insert(int data) {
        root = insertRecursive(root, data);
    }

    private TreeNode insertRecursive(TreeNode current, int data) {
        if (current == null) {
            return new TreeNode(data);
        }

        if (data < current.data) {
            current.left = insertRecursive(current.left, data);
        } else if (data > current.data) {
            current.right = insertRecursive(current.right, data);
        }

        return current;
    }

    // Метод для обхода бинарного дерева в порядке inorder
    public void inorderTraversal(TreeNode node) {
        if (node != null) {
            inorderTraversal(node.left);
            System.out.print(node.data + " ");
            inorderTraversal(node.right);
        }
    }
}

// Пример использования
public class Main {
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();

        // Добавление узлов в бинарное дерево
        tree.insert(5);
        tree.insert(3);
        tree.insert(7);
        tree.insert(1);
        tree.insert(4);

        // Обход бинарного дерева и вывод узлов в порядке inorder
        System.out.println("Узлы бинарного дерева в порядке inorder:");
        tree.inorderTraversal(tree.root);
    }
}
